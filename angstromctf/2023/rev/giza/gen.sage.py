

# This file was *autogenerated* from the file gen.sage
from sage.all_cmdline import *   # import sage library

_sage_const_2 = Integer(2); _sage_const_20 = Integer(20); _sage_const_0 = Integer(0); _sage_const_1 = Integer(1)
from random import randint

with open("flag.txt", "r") as f:
    flag = [ord(i) for i in f.read().strip()]

size = len(flag)

m = matrix(QQ, size, size)

for i in range(size):
    for j in range(i, size):
        m[i, j] = randint(-(_sage_const_2 **_sage_const_20 ), (_sage_const_2 **_sage_const_20 ))

m[_sage_const_0 , _sage_const_0 ] = flag[_sage_const_0 ]

for i in range(size - _sage_const_1 ):
    m[i + _sage_const_1 , i + _sage_const_1 ] = flag[(i + _sage_const_1 ) % len(flag)] + m[i, i]


arr = ["{" + str(list(i))[_sage_const_1 :-_sage_const_1 ] + "}" for i in m]
arr = "{" + ", ".join(arr) + "}"


out = """
#include <stdio.h>
#include <stdint.h>
#include <stdlib.h>

#define N {size}

int m[N][N] = {arr};

void cofac(int mat[N][N], int t[N][N],
                 int p, int q, int n) {{
    int a = 0, b = 0;

    for (int i = 0; i < n; i++) {{
        for (int j = 0; j < n; j++) {{
            if (i != p && j != q)
            {{
                t[a][b++] = mat[i][j];
 
                if (b == n - 1)
                {{
                    b = 0;
                    a++;
                }}
            }}
        }}
    }}
}}
 
int det(int mat[N][N], int n)
{{
    int D = 0;
 
    if (n == 1)
        return mat[0][0];
 
    int temp[N][N];
 
    int sign = 1;
 
    for (int f = 0; f < n; f++) {{

        cofac(mat, temp, 0, f, n);
        D += sign * mat[0][f]* det(temp, n - 1);
        sign = -sign;
    }}
 
    return D;
}}

void main() {{
    int flag[N];

    flag[0] = (int)getchar();

    for (int i = 1; i < N; i++) {{
        int ch = (int)getchar();
        flag[i] = flag[i - 1] + ch;
    }}

    for (int i = 0; i < N; i++) {{
        int mi[N][N];
        for (int r=0; r < N; r++) {{
            for (int s=0; s < N; s++) {{
                if (r == s) {{
                    mi[r][s] = m[r][s] - flag[i];
                }} else {{
                    mi[r][s] = m[r][s];
                }}
            }}
        }}

        int i = det(mi, N);
        if (i != 0) {{
            printf("Buried in the sands...");
            exit(1);
        }}
    }}

    printf("You made it to the top!");
}}

"""

program = out.format(
        size = size,
        arr = arr
)

with open("giza.c", "w") as f:
    f.write(program)


