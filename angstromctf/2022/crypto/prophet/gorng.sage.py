

# This file was *autogenerated* from the file gorng.sage
from sage.all_cmdline import *   # import sage library

_sage_const_607 = Integer(607); _sage_const_273 = Integer(273); _sage_const_2 = Integer(2); _sage_const_64 = Integer(64); _sage_const_0 = Integer(0); _sage_const_1 = Integer(1); _sage_const_4 = Integer(4); _sage_const_100000 = Integer(100000); _sage_const_13 = Integer(13); _sage_const_10 = Integer(10)
from sage.all import *
from tqdm import tqdm

rlen = _sage_const_607 
rtap = _sage_const_273 

def add_coeffs(a, b):
    return [(x + y) % _sage_const_2  ** _sage_const_64  for (x, y) in zip(a, b)]

class Rng:
    def __init__(self, vec=None):
        self.tap = _sage_const_0 
        self.feed = rlen - rtap
        if vec is None:
            self.vec = [[_sage_const_0 ] * rlen for i in range(rlen)]
            for i in range(rlen):
                self.vec[i][i] = _sage_const_1 
        else:
            self.vec = vec

    def gen(self):
        self.tap -= _sage_const_1 
        if self.tap < _sage_const_0 :
            self.tap += rlen
        self.feed -= _sage_const_1 
        if self.feed < _sage_const_0 :
            self.feed += rlen
        if isinstance(self.vec[self.feed], int) or isinstance(self.vec[self.feed], Integer):
            x = (self.vec[self.feed] + self.vec[self.tap]) % _sage_const_2  ** _sage_const_64 
        else:
            x = add_coeffs(self.vec[self.feed], self.vec[self.tap])
        self.vec[self.feed] = x
        return x


rng = Rng()
with open("out.txt", "r") as f:
    nums = [int(x) for x in f.read().strip().split("\n")[_sage_const_4 :]]

for _ in tqdm(range(_sage_const_100000 )):
    rng.gen()
secrets = [rng.gen() for _ in range(_sage_const_4 )]
m = []
gap = _sage_const_0 
for num in nums:
    g = rng.gen()
    m.append(g)
    for _ in range(gap):
        rng.gen()
    gap = (gap + _sage_const_1 ) % _sage_const_13 
m = matrix(Integers(_sage_const_2 **_sage_const_64 ), rlen, rlen, m)
print("solving matrix...")
print(m.det())
v = m.solve_right(vector(nums))
print(v)
rng = Rng([int(v) for v in v])
for _ in tqdm(range(_sage_const_100000 )):
    rng.gen()
for i in range(_sage_const_10 ):
    print(rng.gen())


